[  {
    "id": 1,
    "question": "Which of the following correctly declares a variadic function in Go?",
    "options": ["func Sum(...int) int", "func Sum(nums []int) int", "func Sum(nums ...int) int", "func Sum(int...) int"],
    "correctAnswer": 2
  },
  {
    "id": 2,
    "question": "How do you create a buffered channel with a capacity of 5 in Go?",
    "options": ["make(chan int)", "make(chan int, 5)", "new(buffered chan 5)", "make(chan int, 5, 5)"],
    "correctAnswer": 1
  },
  {
    "id": 3,
    "question": "What is the output of this code: const (A = iota; B; C)?",
    "options": ["A=0, B=0, C=0", "A=0, B=1, C=2", "A=1, B=2, C=3", "A=0, B=1, C=1"],
    "correctAnswer": 1
  },
  {
    "id": 4,
    "question": "Which statement correctly initializes a map with key-value pairs?",
    "options": ["m := map{ \"one\": 1 }", "m := map[string]int{ one:1 }", "m := map[string]int{ \"one\": 1 }", "m := new(map[string]int{ \"one\": 1 })"],
    "correctAnswer": 2
  },
  {
    "id": 5,
    "question": "Which keyword is used for implicit interface implementation in Go?",
    "options": ["satisfies", "implements", "No keyword required", "fulfills"],
    "correctAnswer": 2
  },
  {
    "id": 6,
    "question": "What command initializes a new Go module with the path \"github.com/user/project\"?",
    "options": ["go init -mod=github.com/user/project", "go mod github.com/user/project", "go mod create github.com/user/project", "go mod init github.com/user/project"],
    "correctAnswer": 3
  },
  {
    "id": 7,
    "question": "Which syntax is correct for a switch statement with type inference?",
    "options": ["switch v := x; case int:", "switch x { case int:", "switch v := x.(type) { case int:", "switch x.(type) case int:"],
    "correctAnswer": 2
  },
  {
    "id": 8,
    "question": "What is the correct way to pass 3 arguments to this function: func Example(x, y, z int) {}?",
    "options": ["Example(1, 2, 3)", "Example([3]int{1, 2, 3})", "Example(1, 2) + z=3", "Example((1, 2, 3))"],
    "correctAnswer": 0
  },
  {
    "id": 9,
    "question": "Which keyword allows fallthrough between case blocks in a switch statement?",
    "options": ["continue", "goto", "fallthrough", "break"],
    "correctAnswer": 2
  },
  {
    "id": 10,
    "question": "What is the idiomatic way to handle wrapped errors in Go 1.13+?",
    "options": ["fmt.Errorf(\"%w\", err)", "errors.New(\"%w\"+err)", "panic(err)", "log.Fatal(err)"],
    "correctAnswer": 0
  }
]