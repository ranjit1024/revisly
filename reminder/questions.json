[
  {
    "id": 1,
    "question": "What does the `let` keyword do in Rust?",
    "options": ["Declares a constant", "Declares a variable", "Declares a function", "Declares a module"],
    "correctAnswer": 1,
    "explanation": "In Rust, `let` is used to declare a variable. It does not declare a constant, function, or module."
  },
  {
    "id": 2,
    "question": "What is the difference between `Copy` and `Clone` traits in Rust?",
    "options": ["`Copy` is a part of `Clone`", "`Clone` requires mutable access", "`Copy` is used for primitive types, `Clone` for custom types", "Both `Copy` and `Clone` are used for custom types"],
    "correctAnswer": 2,
    "explanation": "In Rust, `Copy` is only implemented for primitive types, while `Clone` is implemented for any type that needs its own behavior. Custom types typically implement `Clone` but not `Copy`."
  },
  {
    "id": 3,
    "question": "How does Rust handle memory safety at compile-time?",
    "options": ["Using a runtime memory manager", "With explicit pointer arithmetic", "Using memory-safe abstractions and the borrow checker", "Using a garbage collector"],
    "correctAnswer": 2,
    "explanation": "Rust uses the concept of ownership and borrows along with the borrow checker to ensure memory safety at compile-time, preventing common errors such as null pointer dereferences and data races."
  },
  {
    "id": 4,
    "question": "What is the purpose of the `match` keyword in Rust?",
    "options": ["To declare an enum", "To implement a trait", "To perform conditional logic based on a value", "To declare a function"],
    "correctAnswer": 2,
    "explanation": "In Rust, `match` is used to perform conditional logic based on a value, similar to a switch statement in other languages."
  },
  {
    "id": 5,
    "question": "How do you declare a reference to a value that lives longer than the current scope in Rust?",
    "options": ["Using the `clone` method", "Using the `Box` type", "Using the `Rc` type", "Using life annotations"],
    "correctAnswer": 3,
    "explanation": "In Rust, you can declare a reference to a value that lives longer than the current scope by using the `Rc` type, also known as reference counting."
  },
  {
    "id": 6,
    "question": "What is the difference between a `struct` and a `tuple` in Rust?",
    "options": ["A `struct` is a single value, a `tuple` is a tuple of values", "A `struct` is a tuple of values, a `tuple` is a single value", "Both `struct` and `tuple` are used for defining custom types", "Both `struct` and `tuple` are used for defining tuples"],
    "correctAnswer": 1,
    "explanation": "In Rust, a `struct` is a single value, while a `tuple` is a tuple of values. Both can be used to define custom types."
  },
  {
    "id": 7,
    "question": "How do you define a trait in Rust?",
    "options": ["Using the `trait` keyword before the name of the trait", "Using the `trait` keyword after the name of the trait", "Using the `impl` keyword to implement a trait for a type", "Using the `fn` keyword to declare a function with trait bounds"],
    "correctAnswer": 1,
    "explanation": "In Rust, you define a trait by using the `trait` keyword before the name of the trait."
  },
  {
    "id": 8,
    "question": "What is the difference between `async` and `await` in Rust?",
    "options": ["`async` is used for functions that return a future, `await` is used for waiting on a future", "`async` is used for waiting on a future, `await` is used for functions that return a future", "Both `async` and `await` are used for functions that return a future", "Both `async` and `await` are used for waiting on a future"],
    "correctAnswer": 1,
    "explanation": "In Rust, `async` is used for functions that return a future, while `await` is used for waiting on a future."
  },
  {
    "id": 9,
    "question": "How do you declare a module in Rust?",
    "options": ["Using the `mod` keyword followed by the name of the module", "Using the `extern` keyword to declare a module", "Using the `fn` keyword to declare a function with a module as its return type", "Using the `let` keyword to declare a variable with a module as its value"],
    "correctAnswer": 1,
    "explanation": "In Rust, you declare a module by using the `mod` keyword followed by the name of the module."
  },
  {
    "id": 10,
    "question": "What is the purpose of the `Box` type in Rust?",
    "options": ["To declare a reference to a value that lives on the heap", "To declare a tuple of values", "To declare a custom type with a name", "To declare a trait"],
    "correctAnswer": 1,
    "explanation": "In Rust, `Box` is used to declare a reference to a value that lives on the heap."
  }
]