// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // You can change this to your database, e.g., "mysql", "sqlite", "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String            @id @default(cuid()) // Unique ID for your application's user
  email         String            @unique
  name          String? // User's full name, optional
  image         String? // URL to user's profile picture, optional
  emailVerified DateTime? // When the email was verified, useful for some auth flows
  createdAt     DateTime          @default(now())
  updatedAt     DateTime?         @updatedAt
  revision      Revision[]
  revisions     RevisionSession[]
}

model Revision {
  id               String            @id @unique @default(cuid())
  sessinNumber     Int               @default(autoincrement())
  email            String
  topic            String
  sessionsintervel DateTime[]
  sessions         Int
  days             String[]
  time             DateTime
  createdSession   DateTime          @default(now())
  startSesion      DateTime
  endSession       DateTime
  totalDays        Int
  user             User              @relation(fields: [email], references: [email])
  brif             String
  status           Status
  score            Int?
  revisions        RevisionSession[]
}
model RevisionSession {
  id            String   @id @unique @default(cuid())
  email         String
  sessionNumber Int
  score         Int
  topic         String
  revisionid    String
  reminderDate  DateTime
  time          DateTime
  status        Status
  answer        Json?
  revision      Revision @relation(fields: [revisionid], references: [id])
  user          User     @relation(fields: [email], references: [email])
}

enum Status {
  COMPLETED
  PENDING
}
